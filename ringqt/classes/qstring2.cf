<class>
name: QString2
para: void
codename: QString
managed
</class>

QString append( QString  str)
<comment>
QString append2( QChar *str, int len)
QString append3( QChar ch)
QString append( QStringRef  reference)
QString append( QLatin1String str)
QString append( char *str)
QString append( QByteArray  ba)
QString arg( QString  a, int fieldWidth , QChar fillChar ))
QString arg(qulonglong a, int fieldWidth , int base , QChar fillChar ))
QString arg(long a, int fieldWidth , int base , QChar fillChar ))
QString arg(ulong a, int fieldWidth , int base , QChar fillChar ))
QString arg(int a, int fieldWidth , int base , QChar fillChar ))
QString arg(uint a, int fieldWidth , int base , QChar fillChar ))
QString arg(short a, int fieldWidth , int base , QChar fillChar ))
QString arg(ushort a, int fieldWidth , int base , QChar fillChar ))
QString arg(double a, int fieldWidth , char format , int precision , QChar fillChar ))
QString arg(char a, int fieldWidth , QChar fillChar ))
QString arg(QChar a, int fieldWidth , QChar fillChar ))
QString arg(qlonglong a, int fieldWidth , int base , QChar fillChar ))
QString arg( QString  a1,  QString  a2)
QString arg( QString  a1,  QString  a2,  QString  a3)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5,  QString  a6)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5,  QString  a6,  QString  a7)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5,  QString  a6,  QString  a7,  QString  a8)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5,  QString  a6,  QString  a7,  QString  a8,  QString  a9)
QChar at(int position)
iterator begin(void)
const_iterator begin(void)
int capacity(void)
const_iterator cbegin(void)
const_iterator cend(void)
void chop(int n)
void clear(void)
int compare(QLatin1String other, Qt::CaseSensitivity cs )
int compare( QString  other, Qt::CaseSensitivity cs )
int compare( QStringRef  ref, Qt::CaseSensitivity cs )
const_iterator constBegin(void)
 QChar * constData(void)
const_iterator constEnd(void)
bool contains( QString  str, Qt::CaseSensitivity cs )
bool contains(QChar ch, Qt::CaseSensitivity cs )
bool contains(QLatin1String str, Qt::CaseSensitivity cs )
bool contains( QStringRef  str, Qt::CaseSensitivity cs )
bool contains( QRegExp  rx)
bool contains(QRegExp  rx)
bool contains( QRegularExpression  re)
bool contains( QRegularExpression  re, QRegularExpressionMatch *match)
int count( QString  str, Qt::CaseSensitivity cs )
int count(QChar ch, Qt::CaseSensitivity cs )
int count(void)
int count( QStringRef  str, Qt::CaseSensitivity cs )
int count( QRegExp  rx)
int count( QRegularExpression  re)
const_reverse_iterator crbegin(void)
const_reverse_iterator crend(void)
QChar * data(void)
 QChar * data(void)
iterator end(void)
const_iterator end(void)
bool endsWith( QString  s, Qt::CaseSensitivity cs )
bool endsWith( QStringRef  s, Qt::CaseSensitivity cs )
bool endsWith(QLatin1String s, Qt::CaseSensitivity cs )
bool endsWith(QChar c, Qt::CaseSensitivity cs )
QString fill(QChar ch, int size )
int indexOf( QString  str, int from , Qt::CaseSensitivity cs )
int indexOf(QChar ch, int from , Qt::CaseSensitivity cs )
int indexOf(QLatin1String str, int from , Qt::CaseSensitivity cs )
int indexOf( QStringRef  str, int from , Qt::CaseSensitivity cs )
int indexOf( QRegExp  rx, int from )
int indexOf(QRegExp  rx, int from )
int indexOf( QRegularExpression  re, int from )
int indexOf( QRegularExpression  re, int from, QRegularExpressionMatch *rmatch)
QString insert(int position,  QString  str)
QString insert(int position,  QChar *unicode, int size)
QString insert(int position, QChar ch)
QString insert(int position,  QStringRef  str)
QString insert(int position, QLatin1String str)
QString insert(int position,  char *str)
QString insert(int position,  QByteArray  str)
bool isEmpty(void)
bool isNull(void)
bool isRightToLeft(void)
int lastIndexOf( QString  str, int from , Qt::CaseSensitivity cs )
int lastIndexOf(QChar ch, int from , Qt::CaseSensitivity cs )
int lastIndexOf(QLatin1String str, int from , Qt::CaseSensitivity cs )
int lastIndexOf( QStringRef  str, int from , Qt::CaseSensitivity cs )
int lastIndexOf( QRegExp  rx, int from )
int lastIndexOf(QRegExp  rx, int from )
int lastIndexOf( QRegularExpression  re, int from )
int lastIndexOf( QRegularExpression  re, int from, QRegularExpressionMatch *rmatch)
QString left(int n)
QString leftJustified(int width, QChar fill , bool truncate )
QStringRef leftRef(int n)
int length(void)
int localeAwareCompare( QString  other)
int localeAwareCompare( QStringRef  other)
QString mid(int position, int n )
QStringRef midRef(int position, int n )
QString normalized(NormalizationForm mode, QChar::UnicodeVersion version )
QString prepend( QString  str)
QString prepend( QChar *str, int len)
QString prepend(QChar ch)
QString prepend( QStringRef  str)
QString prepend(QLatin1String str)
QString prepend( char *str)
QString prepend( QByteArray  ba)
void push_back( QString  other)
void push_back(QChar ch)
void push_front( QString  other)
void push_front(QChar ch)
reverse_iterator rbegin(void)
const_reverse_iterator rbegin(void)
QString remove(int position, int n)
QString remove(QChar ch, Qt::CaseSensitivity cs )
QString remove( QString  str, Qt::CaseSensitivity cs )
QString remove( QRegExp  rx)
QString remove( QRegularExpression  re)
reverse_iterator rend(void)
const_reverse_iterator rend(void)
QString repeated(int times)
QString replace(int position, int n,  QString  after)
QString replace(int position, int n,  QChar *unicode, int size)
QString replace(int position, int n, QChar after)
QString replace(QChar before, QChar after, Qt::CaseSensitivity cs )
QString replace( QChar *before, int blen,  QChar *after, int alen, Qt::CaseSensitivity cs )
QString replace(QLatin1String before, QLatin1String after, Qt::CaseSensitivity cs )
QString replace(QLatin1String before,  QString  after, Qt::CaseSensitivity cs )
QString replace( QString  before, QLatin1String after, Qt::CaseSensitivity cs )
QString replace( QString  before,  QString  after, Qt::CaseSensitivity cs )
QString replace(QChar ch,  QString  after, Qt::CaseSensitivity cs )
QString replace(QChar c, QLatin1String after, Qt::CaseSensitivity cs )
QString replace( QRegExp  rx,  QString  after)
QString replace( QRegularExpression  re,  QString  after)
void reserve(int size)
void resize(int size)
void resize(int size, QChar fillChar)
QString right(int n)
QString rightJustified(int width, QChar fill , bool truncate )
QStringRef rightRef(int n)
QString section(QChar sep, int start, int end , SectionFlags flags )
QString section( QString  sep, int start, int end , SectionFlags flags )
QString section( QRegExp  reg, int start, int end , SectionFlags flags )
QString section( QRegularExpression  re, int start, int end , SectionFlags flags )
QString setNum(int n, int base )
QString setNum(ushort n, int base )
QString setNum(short n, int base )
QString setNum(uint n, int base )
QString setNum(long n, int base )
QString setNum(ulong n, int base )
QString setNum(qlonglong n, int base )
QString setNum(qulonglong n, int base )
QString setNum(float n, char format , int precision )
QString setNum(double n, char format , int precision )
QString setRawData( QChar *unicode, int size)
QString setUnicode( QChar *unicode, int size)
QString setUtf16( ushort *unicode, int size)
QString simplified(void)
int size(void)
QVector<QStringRef> splitRef( QString  sep, SplitBehavior behavior , Qt::CaseSensitivity cs )
QVector<QStringRef> splitRef(QChar sep, SplitBehavior behavior , Qt::CaseSensitivity cs )
QVector<QStringRef> splitRef( QRegExp  rx, SplitBehavior behavior )
QVector<QStringRef> splitRef( QRegularExpression  re, SplitBehavior behavior )
void squeeze(void)
bool startsWith( QString  s, Qt::CaseSensitivity cs )
bool startsWith( QStringRef  s, Qt::CaseSensitivity cs )
bool startsWith(QLatin1String s, Qt::CaseSensitivity cs )
bool startsWith(QChar c, Qt::CaseSensitivity cs )
void swap(QString  other)
CFStringRef toCFString(void)
QString toCaseFolded(void)
double toDouble(bool *ok )
float toFloat(bool *ok )
QString toHtmlEscaped(void)
int toInt(bool *ok , int base )
long toLong(bool *ok , int base )
qlonglong toLongLong(bool *ok , int base )
QString toLower(void)
NSString * toNSString(void)
short toShort(bool *ok , int base )
std::string toStdString(void)
std::u16string toStdU16String(void)
std::u32string toStdU32String(void)
std::wstring toStdWString(void)
uint toUInt(bool *ok , int base )
ulong toULong(bool *ok , int base )
qulonglong toULongLong(bool *ok , int base )
ushort toUShort(bool *ok , int base )
QVector<uint> toUcs4(void)
QString toUpper(void)
int toWCharArray(wchar_t *array)
QString trimmed(void)
void truncate(int position)
ushort * utf16(void)
</comment>

QByteArray toUtf8(void)
QByteArray toLatin1(void)
QByteArray toLocal8Bit(void)
QStringList split( QString  sep, QString::SplitBehavior behavior , Qt::CaseSensitivity cs )
QStringList split@2(QChar sep, QString::SplitBehavior behavior , Qt::CaseSensitivity cs )
QStringList split@3( QRegExp  rx, QString::SplitBehavior behavior )
QStringList split@4( QRegularExpression  re, QString::SplitBehavior behavior )

QChar * unicode(void)
QString number(ulong n, int base)
